/**
 * This class is generated by jOOQ
 */
package com.markovlabs.eros.model.tables;


import com.markovlabs.eros.model.Eros;
import com.markovlabs.eros.model.Keys;
import com.markovlabs.eros.model.enums.QuestionPageType;
import com.markovlabs.eros.model.tables.records.QuestionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Question extends TableImpl<QuestionRecord> {

	private static final long serialVersionUID = 1328436621;

	/**
	 * The reference instance of <code>eros.QUESTION</code>
	 */
	public static final Question QUESTION = new Question();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<QuestionRecord> getRecordType() {
		return QuestionRecord.class;
	}

	/**
	 * The column <code>eros.QUESTION.ID</code>.
	 */
	public final TableField<QuestionRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>eros.QUESTION.CONTENT</code>.
	 */
	public final TableField<QuestionRecord, String> CONTENT = createField("CONTENT", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>eros.QUESTION.PAGE_TYPE</code>.
	 */
	public final TableField<QuestionRecord, QuestionPageType> PAGE_TYPE = createField("PAGE_TYPE", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(com.markovlabs.eros.model.enums.QuestionPageType.class), this, "");

	/**
	 * Create a <code>eros.QUESTION</code> table reference
	 */
	public Question() {
		this("QUESTION", null);
	}

	/**
	 * Create an aliased <code>eros.QUESTION</code> table reference
	 */
	public Question(String alias) {
		this(alias, QUESTION);
	}

	private Question(String alias, Table<QuestionRecord> aliased) {
		this(alias, aliased, null);
	}

	private Question(String alias, Table<QuestionRecord> aliased, Field<?>[] parameters) {
		super(alias, Eros.EROS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<QuestionRecord, Long> getIdentity() {
		return Keys.IDENTITY_QUESTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<QuestionRecord> getPrimaryKey() {
		return Keys.KEY_QUESTION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<QuestionRecord>> getKeys() {
		return Arrays.<UniqueKey<QuestionRecord>>asList(Keys.KEY_QUESTION_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Question as(String alias) {
		return new Question(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Question rename(String name) {
		return new Question(name, null);
	}
}
